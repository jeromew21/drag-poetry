{"version":3,"sources":["logo.svg","inputs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LineInput","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","item","content","parent","handleChange","bind","assertThisInitialized","inherits","createClass","key","event","target","updatePoem","setState","react_default","a","createElement","className","type","onChange","Component","getItems","count","idPrefix","Array","from","length","v","k","map","id","concat","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","objectSpread","userSelect","padding","margin","background","DraggyBoi","style","fontSize","inputs_LineInput","FileInput","uploadFile","_this2","file","files","reader","FileReader","onloadend","e","lines","split","filter","i","import","readAsText","name","App","_this3","onDragEnd","items","getList","trash","droppable","id2List","poem","newLine","getPoem","shuffle","j","x","Math","floor","random","prevState","toConsumableArray","_this4","react_beautiful_dnd_esm","onClick","App_FileInput","provided","snapshot","ref","innerRef","isDraggingOver","width","draggableId","assign","draggableProps","dragHandleProps","App_DraggyBoi","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.371948be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport class LineInput extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: props.item.content};\n      this.item = props.item;\n      this.parent = props.parent;\n      this.handleChange = this.handleChange.bind(this);\n    }\n\n    getValue() {\n        return this.state.value;\n    }\n  \n    handleChange(event) {\n      this.item.content = event.target.value;\n      this.parent.updatePoem();\n      this.setState({value: event.target.value});\n    }\n  \n    render() {\n      return (\n        <input className=\"lineInput\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n      );\n    }\n}","import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { LineInput } from './inputs.js';\nimport logo from './logo.svg';\nimport './App.css';\n\n// fake data generator\nconst getItems = (count, idPrefix) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${idPrefix}-${k}`,\n    content: \"\",\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst shuffle = (a) => {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: 8 * 2,\n  margin: `0 0 8px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'aliceblue' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: 'white',//isDraggingOver ? 'white' : 'lightgrey',\n  padding: 8,\n  width: 550,\n});\n\nclass DraggyBoi extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <span className=\"handle\" style={{fontSize: 20}}>= </span>\n        <LineInput item={this.props.item} parent={this.props.parent} />\n      </div>\n    )\n  } \n}\n\nclass FileInput extends Component {\n  constructor(props) {\n    super(props)\n    this.uploadFile = this.uploadFile.bind(this);\n  }\n  \n  uploadFile(event) {\n      let file = event.target.files[0];\n      \n      if (file) {\n        let reader = new FileReader();\n        const onRead = (e) => {\n          let lines = reader.result.split(\"\\n\");\n          lines = lines.filter((i) => {return i.length > 0});\n          this.props.parent.import(lines);\n        }\n        reader.onloadend = onRead;\n        reader.readAsText(file);\n      }\n  }\n  \n  render() {\n    return <span>\n      <input type=\"file\"\n      name=\"myFile\"\n      onChange={this.uploadFile} />\n    </span>\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(4, \"main\"),\n      poem: \"\",\n      trash: getItems(0, \"trash\"),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.updatePoem = this.updatePoem.bind(this);\n    this.newLine = this.newLine.bind(this);\n    this.getPoem = this.getPoem.bind(this);\n    this.import = this.import.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n  }\n\n  shuffle() {\n    const items = shuffle(this.state.items);\n    this.setState({items: items}, this.updatePoem);\n  }\n\n  import(lines) {\n    const items = lines.map(k => ({\n      id: `item-imported-${k}`,\n      content: k,\n    }));\n    this.setState({items: items}, this.updatePoem);\n  }\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n        return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n        const items = reorder(\n            this.getList(source.droppableId),\n            source.index,\n            destination.index\n        );\n\n        let state = { items: items };\n\n        if (source.droppableId === 'trash') {\n            state = { trash: items };\n        }\n\n        this.setState(state, this.updatePoem);\n    } else {\n      const result = move(\n          this.getList(source.droppableId),\n          this.getList(destination.droppableId),\n          source,\n          destination\n      );\n\n      this.setState({\n          items: result.droppable,\n          trash: result.trash\n      }, this.updatePoem);\n    }\n  };\n\n  updatePoem() {\n    const poem = this.state.items.map(k => {\n      return <div>{k.content}</div>;\n    })\n\n    this.setState({\n      poem: poem,\n    });\n  }\n\n  newLine() {\n    const item = {id: `item-new-${this.state.items.length}`, content: \"\"};\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }));\n  }\n\n  getPoem() {\n    return this.state.poem\n  }\n\n  id2List = {\n    droppable: 'items',\n    trash: 'trash'\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"row\">\n          <div className=\"col-md-5\">\n            <button className=\"btn\" onClick={this.newLine}>New line</button>\n            <button className=\"btn\" onClick={this.shuffle}>Shuffle</button>\n            <span>Import: </span>\n            <FileInput parent={this} />\n            <div className=\"itemsContainer\">\n              <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                    {this.state.items.map((item, index) => (\n                      <Draggable key={item.id} draggableId={item.id} index={index}>\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}\n                          >\n                            <DraggyBoi item={item} parent={this} />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n          <div className=\"col-md-7\">\n            <div className=\"poem\">\n              {this.getPoem()}\n            </div>\n            <Droppable droppableId=\"trash\">\n                {(provided, snapshot) => (\n                    <div\n                        ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}>\n                        <h2>Trash</h2>\n                        {this.state.trash.map((item, index) => (\n                            <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}>\n                                {(provided, snapshot) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                        )}>\n                                        <DraggyBoi item={item} parent={this} />\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </div>\n        </div>\n      </DragDropContext>      \n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}